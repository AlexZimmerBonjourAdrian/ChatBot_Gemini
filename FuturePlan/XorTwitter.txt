# Plan de Implementación de Bot de X (Twitter) con IA

## 1. Preparación Inicial
- [ ] Crear cuenta de desarrollador en X Developer Portal
- [ ] Obtener API key de OpenAI
- [ ] Instalar Python y pip
- [ ] Crear cuenta específica para el bot en X

## 2. Configuración del Proyecto
```bash
# Crear directorio del proyecto
mkdir x-ai-bot
cd x-ai-bot

# Crear entorno virtual
python -m venv venv
source venv/bin/activate  # En Windows: venv\Scripts\activate

# Instalar dependencias necesarias
pip install tweepy openai python-dotenv flask redis requests-oauthlib
```

## 3. Estructura de Archivos
```
x-ai-bot/
├── .env                  # Variables de entorno
├── main.py              # Archivo principal
├── config.py            # Configuraciones
├── requirements.txt     # Dependencias
└── templates/          # Plantillas HTML (si se usa interfaz web)
```

## 4. Variables de Entorno (.env)
```
# Credenciales de X
X_CLIENT_ID=tu_client_id
X_CLIENT_SECRET=tu_client_secret
X_REDIRECT_URI=http://127.0.0.1:5000/oauth/callback

# OpenAI
OPENAI_API_KEY=tu_api_key_de_openai

# Redis (para almacenamiento)
REDIS_URL=tu_url_de_redis
```

## 5. Pasos de Implementación

### 5.1 Configuración del Bot en X
1. Ir a X Developer Portal
2. Crear nuevo proyecto
3. Configurar aplicación con OAuth 2.0
4. Obtener credenciales:
   - Client ID
   - Client Secret
5. Configurar URI de redirección
6. Activar scopes necesarios:
   - tweet.read
   - users.read
   - tweet.write
   - offline_access

### 5.2 Código Base (main.py)
```python
import os
import base64
import hashlib
import requests
import redis
from flask import Flask, request, redirect, session, url_for
from requests_oauthlib import OAuth2Session
from openai import OpenAI
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Configuración de la aplicación
app = Flask(__name__)
app.secret_key = os.urandom(50)

# Configuración de Redis
r = redis.from_url(os.environ["REDIS_URL"])

# Configuración de OpenAI
openai_client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# Configuración de OAuth
client_id = os.environ.get("X_CLIENT_ID")
client_secret = os.environ.get("X_CLIENT_SECRET")
redirect_uri = os.environ.get("X_REDIRECT_URI")
auth_url = "https://twitter.com/i/oauth2/authorize"
token_url = "https://api.x.com/2/oauth2/token"

# Scopes necesarios
scopes = ["tweet.read", "users.read", "tweet.write", "offline_access"]

def generate_tweet_content(prompt):
    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"Error generando contenido: {e}")
        return None

@app.route("/")
def index():
    return "Bot de X con IA"

@app.route("/oauth/authorize")
def authorize():
    oauth = OAuth2Session(client_id, redirect_uri=redirect_uri, scope=scopes)
    authorization_url, state = oauth.authorization_url(auth_url)
    session['oauth2_state'] = state
    return redirect(authorization_url)

@app.route("/oauth/callback")
def callback():
    oauth = OAuth2Session(client_id, redirect_uri=redirect_uri)
    token = oauth.fetch_token(
        token_url,
        client_id=client_id,
        client_secret=client_secret,
        authorization_response=request.url
    )
    session['oauth2_token'] = token
    return "Autenticación exitosa"

if __name__ == "__main__":
    app.run(debug=True)
```

## 6. Despliegue
1. Crear cuenta en Render o Heroku
2. Configurar variables de entorno en la plataforma
3. Configurar Redis para almacenamiento
4. Desplegar aplicación

## 7. Funcionalidades del Bot
- [ ] Responder a menciones
- [ ] Generar tweets programados
- [ ] Interactuar con otros usuarios
- [ ] Analizar tendencias
- [ ] Generar contenido basado en IA

## 8. Pruebas y Monitoreo
- [ ] Probar autenticación OAuth
- [ ] Verificar generación de contenido
- [ ] Monitorear límites de API
- [ ] Implementar sistema de logs

## 9. Mejoras Futuras
- [ ] Añadir procesamiento de imágenes
- [ ] Implementar análisis de sentimiento
- [ ] Crear sistema de moderación
- [ ] Añadir más interacciones

## 10. Recursos Útiles
- Documentación de X API v2
- Documentación de OpenAI
- Guías de OAuth 2.0
- Documentación de Redis

## 11. Notas Importantes
- Mantener las credenciales seguras
- Respetar los límites de la API
- Implementar manejo de errores robusto
- Seguir las políticas de X para bots
- Realizar backups regulares de la base de datos
